# Generated by Django 5.0.6 on 2024-07-13 17:15
import uuid

import django.db.models.deletion
from django.db import migrations, models

import bot.common.model_fields
import bot.constants


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'integration',
                    bot.common.model_fields.StringEnumField(
                        choices=[
                            ('instagram', 'INSTAGRAM'),
                            ('facebook', 'FACEBOOK'),
                            ('tiktok', 'TIKTOK'),
                            ('reddit', 'REDDIT'),
                            ('twitch', 'TWITCH'),
                            ('twitter', 'TWITTER'),
                            ('youtube', 'YOUTUBE'),
                        ],
                        editable=False,
                        enum=bot.constants.Integration,
                        max_length=9,
                    ),
                ),
                ('integration_uid', models.CharField(editable=False, max_length=64)),
                ('integration_index', models.PositiveSmallIntegerField(null=True)),
                ('author', models.CharField(default=None, max_length=128, null=True)),
                ('description', models.CharField(default=None, max_length=2000, null=True)),
                ('views', models.BigIntegerField(default=None, null=True)),
                ('likes', models.BigIntegerField(default=None, null=True)),
                ('spoiler', models.BooleanField(default=False)),
                ('posted_at', models.DateTimeField(default=None, null=True)),
                ('blob', models.BinaryField(default=None, max_length=1048576, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'post',
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('vendor_uid', models.CharField(editable=False, max_length=32)),
                (
                    'vendor',
                    bot.common.model_fields.StringEnumField(
                        choices=[('discord', 'DISCORD')],
                        default=bot.constants.ServerVendor['DISCORD'],
                        enum=bot.constants.ServerVendor,
                        max_length=7,
                    ),
                ),
                (
                    'tier',
                    bot.common.model_fields.IntEnumField(
                        choices=[(1, 'FREE'), (2, 'STANDARD'), (3, 'PREMIUM'), (4, 'ULTRA')],
                        default=bot.constants.ServerTier['FREE'],
                        enum=bot.constants.ServerTier,
                    ),
                ),
                ('tier_valid_until', models.DateTimeField(null=True)),
                (
                    'status',
                    bot.common.model_fields.IntEnumField(
                        choices=[(1, 'ACTIVE'), (2, 'INACTIVE'), (3, 'BLOCKED')],
                        default=bot.constants.ServerStatus['ACTIVE'],
                        enum=bot.constants.ServerStatus,
                    ),
                ),
                ('prefix', models.CharField(max_length=1, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'server',
            },
        ),
        migrations.CreateModel(
            name='ServerIntegrationPostFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                (
                    'integration',
                    bot.common.model_fields.StringEnumField(
                        choices=[
                            ('instagram', 'INSTAGRAM'),
                            ('facebook', 'FACEBOOK'),
                            ('tiktok', 'TIKTOK'),
                            ('reddit', 'REDDIT'),
                            ('twitch', 'TWITCH'),
                            ('twitter', 'TWITTER'),
                            ('youtube', 'YOUTUBE'),
                        ],
                        editable=False,
                        enum=bot.constants.Integration,
                        max_length=9,
                    ),
                ),
                ('post_format', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'server_integration_post_format',
            },
        ),
        migrations.CreateModel(
            name='ServerPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_uid', models.CharField(db_index=True, editable=False, max_length=32)),
                ('url', models.URLField(editable=False, max_length=2000)),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'server_post',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
            ],
        ),
        migrations.AddConstraint(
            model_name='post',
            constraint=models.UniqueConstraint(
                fields=('integration', 'integration_uid', 'integration_index'), name='post_integration_unique_idx'
            ),
        ),
        migrations.AddField(
            model_name='serverintegrationpostformat',
            name='server',
            field=models.ForeignKey(
                default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bot.server'
            ),
        ),
        migrations.AddField(
            model_name='serverpost',
            name='post',
            field=models.ForeignKey(
                default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bot.post'
            ),
        ),
        migrations.AddField(
            model_name='serverpost',
            name='server',
            field=models.ForeignKey(
                default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bot.server'
            ),
        ),
        migrations.AddField(
            model_name='server',
            name='owner',
            field=models.ForeignKey(
                default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='bot.user'
            ),
        ),
        migrations.AddConstraint(
            model_name='serverintegrationpostformat',
            constraint=models.UniqueConstraint(fields=('server', 'integration'), name='server_integration_unique_idx'),
        ),
        migrations.AddIndex(
            model_name='serverpost',
            index=models.Index(fields=['server', 'created'], name='server_post_server__0edfec_idx'),
        ),
        migrations.AddIndex(
            model_name='server',
            index=models.Index(fields=['tier', 'tier_valid_until'], name='server_tier_a65449_idx'),
        ),
        migrations.AddConstraint(
            model_name='server',
            constraint=models.UniqueConstraint(fields=('vendor', 'vendor_uid'), name='vendor_unique_idx'),
        ),
    ]
